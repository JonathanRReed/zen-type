---
import '../styles/globals.css';
import QuoteTyper from '../components/QuoteTyper';
import StatsBar from '../components/StatsBar';
import PauseMenu from '../components/PauseMenu';
import HelpSheet from '../components/HelpSheet';
import ThemeToggle from '../components/ThemeToggle';
import AboutOverlay from '../components/AboutOverlay';
import SiteFooter from '../components/SiteFooter';
import ClientTransitions from '../components/ClientTransitions';
import { loadQuotes, getRandomQuote } from '../utils/quotes';

// Load a random quote at build time
const quotes = await loadQuotes();
const randomQuote = getRandomQuote(quotes);
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Quote Mode - Zen Typer</title>
		<meta name="description" content="Type curated Zen quotes with precision tracking" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet" />
	</head>
	<body>
		<ClientTransitions client:load />
		<div id="quote-app" class="relative w-full min-h-screen">
			<!-- Header controls -->
			<header class="fixed top-0 left-0 right-0 z-40 p-6 flex justify-between items-center bg-base/80 backdrop-blur-md">
				<div class="flex items-center gap-4">
					<a href="/" class="text-muted hover:text-text transition-colors">
						<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<line x1="19" y1="12" x2="5" y2="12"/>
							<polyline points="12 19 5 12 12 5"/>
						</svg>
					</a>
					<span class="text-sm font-mono text-muted">Quote Mode</span>
				</div>
				<div class="flex items-center gap-4">
					<button 
						id="new-quote-btn"
						class="px-4 py-2 text-sm bg-surface/60 hover:bg-surface/80 
						       border border-muted/20 rounded-lg
						       text-text font-sans transition-all"
					>
						New Quote
					</button>
					<button 
						class="button-ghost px-3 py-2 rounded-lg text-sm"
						aria-label="Open help"
						onclick="window.dispatchEvent(new CustomEvent('toggleHelp',{detail:true}))"
					>
						?
					</button>
					<button 
						class="button-ghost px-3 py-2 rounded-lg text-sm"
						aria-label="Open pause menu"
						onclick="window.dispatchEvent(new CustomEvent('togglePause',{detail:true}))"
					>
						||
					</button>
					<ThemeToggle client:load />
				</div>
			</header>

			<!-- Main quote typer -->
			<div id="quote-container">
				<QuoteTyper 
					client:load
					quote={randomQuote.text}
					author={randomQuote.author}
					onComplete={(summary) => {
						// Handle completion
						const completeEvent = new CustomEvent('quoteComplete', { detail: summary });
						window.dispatchEvent(completeEvent);
					}}
				/>
			</div>

			<!-- Stats bar -->
			<StatsBar 
				client:load
				mode="quote"
				visible={true}
				metrics={{}}
			/>

			<!-- Pause menu -->
			<PauseMenu 
				client:load
				isOpen={false}
				mode="quote"
				onClose={() => {}}
				onReset={() => {
					// Smoothly load a new quote without reload
					window.dispatchEvent(new CustomEvent('newQuote'));
				}}
			/>

			<!-- Help sheet -->
			<HelpSheet 
				client:load
				isOpen={false}
				onClose={() => {}}
			/>
			<AboutOverlay client:load />
			<SiteFooter client:load />
		</div>

		<script define:vars={{ quotes }}>
			let isPaused = false;
			let helpOpen = false;
			let statsVisible = true;

			// Handle keyboard shortcuts
			document.addEventListener('keydown', (e) => {
				const ae = document.activeElement;
				const tag = ae && ae.tagName ? ae.tagName.toLowerCase() : '';
				const isTyping = tag === 'input' || tag === 'textarea';
				// Tab to switch to Zen mode
				if (!isTyping && e.key === 'Tab' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
					e.preventDefault();
					document.documentElement.classList.add('page-exit');
					setTimeout(() => { window.location.href = '/zen'; }, 200);
				}
				
				// Esc for pause menu
				if (e.key === 'Escape') {
					e.preventDefault();
					isPaused = !isPaused;
					const pauseEvent = new CustomEvent('togglePause', { detail: isPaused });
					window.dispatchEvent(pauseEvent);
				}
				
				// F for fullscreen (uppercase only)
				if (!isTyping && e.key === 'F') {
					if (!e.ctrlKey && !e.metaKey) {
						e.preventDefault();
						if (!document.fullscreenElement) {
							document.documentElement.requestFullscreen();
						} else {
							document.exitFullscreen();
						}
					}
				}
				
				// T to toggle stats (uppercase only)
				if (!isTyping && e.key === 'T') {
					if (!e.ctrlKey && !e.metaKey) {
						e.preventDefault();
						statsVisible = !statsVisible;
						const statsEvent = new CustomEvent('toggleStats', { detail: statsVisible });
						window.dispatchEvent(statsEvent);
					}
				}

				// ? for help
				if (!isTyping && e.key === '?') {
					e.preventDefault();
					helpOpen = !helpOpen;
					const helpEvent = new CustomEvent('toggleHelp', { detail: helpOpen });
					window.dispatchEvent(helpEvent);
				}
			});

			// New quote button (no reload, seamless)
			document.getElementById('new-quote-btn')?.addEventListener('click', () => {
				const randomIndex = Math.floor(Math.random() * quotes.length);
				const newQuote = quotes[randomIndex];
				window.dispatchEvent(new CustomEvent('newQuote', { detail: { quote: newQuote.text, author: newQuote.author } }));
			});

			// Quote completion is handled within QuoteTyper (stats persisted + event dispatched)
		</script>
	</body>
</html>
