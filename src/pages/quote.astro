---
import '../styles/globals.css';
import QuoteTyper from '../components/QuoteTyper';
import StatsBar from '../components/StatsBar';
import PauseMenu from '../components/PauseMenu';
import HelpSheet from '../components/HelpSheet';
import AboutOverlay from '../components/AboutOverlay';
import ArchiveOverlay from '../components/ArchiveOverlay';
import SiteFooter from '../components/SiteFooter';
import ClientTransitions from '../components/ClientTransitions';
import SiteHeader from '../components/SiteHeader';
import { loadQuotes, getRandomQuote } from '../utils/quotes';

// Load a random quote at build time
const quotes = await loadQuotes();
const randomQuote = getRandomQuote(quotes);
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Quote Mode - Zen Typer</title>
		<meta name="description" content="Type curated Zen quotes with precision tracking" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet" />
	</head>
	<body>
		<ClientTransitions client:load />
		<div id="quote-app" class="relative w-full min-h-screen">
			<SiteHeader client:load mode="quote" />

			<!-- Main quote typer -->
			<div id="quote-container">
				<QuoteTyper 
					client:load
					quote={randomQuote.text}
					author={randomQuote.author}
					onComplete={(summary) => {
						// Handle completion
						const completeEvent = new CustomEvent('quoteComplete', { detail: summary });
						window.dispatchEvent(completeEvent);
					}}
				/>
			</div>

			<!-- Stats bar -->
			<StatsBar 
				client:load
				mode="quote"
				visible={true}
				metrics={{}}
			/>

			<!-- Pause menu -->
			<PauseMenu 
				client:load
				isOpen={false}
				mode="quote"
				onClose={() => {}}
				onReset={() => {
					// Smoothly load a new quote without reload
					window.dispatchEvent(new CustomEvent('newQuote'));
				}}
			/>

			<!-- Help sheet -->
			<HelpSheet 
				client:load
				isOpen={false}
				onClose={() => {}}
			/>
			<AboutOverlay client:load />
			<ArchiveOverlay client:load />
			<SiteFooter client:load />
		</div>

		<script>
			let isPaused = false;

			// Handle keyboard shortcuts
			document.addEventListener('keydown', (e) => {
				const ae = document.activeElement;
				const tag = ae && ae.tagName ? ae.tagName.toLowerCase() : '';
				const isTyping = tag === 'input' || tag === 'textarea';
				// Tab to switch to Zen mode
				if (!isTyping && e.key === 'Tab' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
					e.preventDefault();
					window.dispatchEvent(new CustomEvent('app:navigate', { detail: '/zen' }));
				}
				
				// Esc for pause menu
				if (e.key === 'Escape') {
					e.preventDefault();
					isPaused = !isPaused;
					const pauseEvent = new CustomEvent('togglePause', { detail: isPaused });
					window.dispatchEvent(pauseEvent);
				}
			});

			// Quote completion is handled within QuoteTyper (stats persisted + event dispatched)
		</script>
	</body>
</html>
